#!/bin/bash

CERT_INCLUDE_DIR=${1}
. ${CERT_INCLUDE_DIR}/config.inc
. ${CERT_INCLUDE_DIR}/ifm-common.inc

rs485_test_run=${CERT_TEST_STATUS_HOME}/${2}_test.run
echo 0 > ${rs485_test_run}

function ping_pong_tty_test() {
    declare -A PING_PONG_RECEIVER=(
        [ping]="pong"
        [pong]="ping"
    )
    local btest=${1:-"ping"}
    local etest=${2:-"pong"}
    for tty in ${btest} ${etest} ; do
        devtty=tty_${tty}
        [[ -c $(readlink -f /dev/${!devtty}) ]] || return 1
        stty -F /dev/${!devtty} ${rs485_serial_speed} ${rs485_serial_opts}
    done
    ping_pong_tty_out=/tmp/ping_pong_tty_out.log # Prepare log filename
    for sender in ${btest} ${etest} ; do
        : > ${ping_pong_tty_out} # Cleanup log file
        tty_sender=tty_${sender}
        receiver=${PING_PONG_RECEIVER[${sender}]}
        tty_receiver=tty_${receiver}
        local msg=${sender^}
        smsg="${!msg}""${!msg}"
        cat /dev/${!tty_receiver} > ${ping_pong_tty_out} & pid=$!
        sleep 0.5
        echo -en "${smsg}" > /dev/${!tty_sender} # Send pattern via tty_sender
        sleep 0.7
        sync
        kill -15 ${pid}
        wait ${pid} &> /dev/null
        rmsg=$(cat ${ping_pong_tty_out}) # Read received data into variable
        if [[ "${rmsg}" != "$(echo -en "${smsg}")" ]]; then
            echo "${sender^^} test:   FAIL"
            echo "Detected a problem with [${!tty_sender}] ==> [${!tty_receiver}] loop"
            return 1;
        fi
    done
    return 0;
}

function tty_ping_pong_test() {
    local errcode=0
    declare -a RSxxx_PING=()
    declare -a RSxxx_PONG=()
    # pin 1 is in the corner next to micro USB
    RSxxx_PING=(ttyLP4) # uart5: pos-7, neg-8
    RSxxx_PONG=(ttyLP6)  # uart7: pos-5, neg-6
    for i in $(seq 0 $(( ${#RSxxx_PING[@]} - 1))) ; do
        export tty_ping=${RSxxx_PING[${i}]}
        export tty_pong=${RSxxx_PONG[${i}]}
        ping_pong_tty_test ; (( errcode |= $? ))
    done
    return ${errcode}
}

function func_test-RS485() {
while [ 1 ] ; do
    sleep ${rs485_sleep}
    tty_ping_pong_test
    if [[ $? -eq 0 ]] ; then
        echo 1 > ${rs485_test_run}
    else
        echo 0 > ${rs485_test_run}
    fi
done
}

#set -x
if [[ "${wb_test_role}" == "DUT" ]] ; then
    func_test-RS485
else
    echo 1 > ${rs485_test_run}
fi
